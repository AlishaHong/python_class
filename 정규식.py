
import re

data = '''
park 800905-1049118
kim 700905-1059119
'''


#1. 정규식으로 풀기

pat = re.compile("(\d{6})[-](\d{7})")
print(pat.sub("\g<1>-*******",data))



#2. 문자열 replace로 풀기 
#분리된 문자열이었다면 원소하나씩 돌면서 수정 도전했을텐데.. 
a = data.find('-')
print(a)

data2 = data.replace(data[data.find('-') + 1:],'*')
print(data2)




# [] -> 문자클래스
# [abc] 와 "a","before","dude"
# "a"는 정규식과 일치하는 문자인 a가 있으므로 매치 
# "before"도 b가 있으므로 매치
# "dude"는 하나도 포함하지 않으므로 매치되지 않는다.a


# [-] 
# [a-c] = [abc]


#[a-zA-Z] 모든 알파벳 
#[0-9] 모든 숫자

#^ NOT의 의미   ^[0-9] 숫자가 아닌 문자만 매치됨

#자주사용하는 문자클래스(대문자는 소문자의 반대임)
# \d 숫자와 매치 = [0-9]
# \D 숫자가 아닌것과 매치 = ^[0-9]
# \s 화이트스페이스 -> 공백문자나 탭 줄바꾸기 등 
# \S 화이트스페이스가 아닌 문자와 매치 
# \w 문자와 숫자 = [a-zA-Z0-9]
# \W 문자 숫자가 아닌 문자 



# .(dot) 문자  -> 줄바꿈을 제외한 모든문자와 매치 
# a.b -> a+'모든문자'+b   -> a와 b사이에 어떤 문자가 들어가도 모두 매치된다는 의미 

#[.] 이렇게 쓰면 문자그대로 "."를 뜻함 


# * 문자 -> 0부터 무한대까지의 반복을 의미함 
#ca*t -> ct/cat/caaat 모두 매치 
# 별 문자 바로 앞에있는 문자가 0부터 무한대까지 반복되도 된다


# +문자 -> 1번이상 반복 
#ca+t 0-> ct는 매칭되지 않음

# {}

#{m} 글자수 지정
#{m,n} m부터 n까지 글자수 지정 










